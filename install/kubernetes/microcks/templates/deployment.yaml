apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
spec:
  replicas: {{ .Values.microcks.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}"
      container: spring
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}"
        container: spring
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      containers:
      - name: spring
        image: {{ include "microcks.image" . }}
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        env:
          - name: JAVA_OPTIONS
            value: "-XX:+TieredCompilation -XX:TieredStopAtLevel=2"
          - name: JAVA_MAJOR_VERSION
            value: "11"
          - name: SPRING_PROFILES_ACTIVE
            value: prod{{ if .Values.microcks.extraProperties }},extra{{ end }}
          - name: SPRING_DATA_MONGODB_URI
            value: {{ .Values.mongodb.uri | default (print "mongodb://${SPRING_DATA_MONGODB_USER}:${SPRING_DATA_MONGODB_PASSWORD}@" .Values.appName "-mongodb:27017") }}/${SPRING_DATA_MONGODB_DATABASE}{{ .Values.mongodb.uriParameters }}
          - name: SPRING_DATA_MONGODB_USER
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.usernameKey | default "username" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: username
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if hasKey .Values.mongodb "secretRef" }}
                key: {{ .Values.mongodb.secretRef.passwordKey | default "password" }}
                name: {{ .Values.mongodb.secretRef.secret | default (print .Values.appName "-mongodb-connection") }}
                {{- else }}
                key: password
                name: "{{ .Values.appName }}-mongodb-connection"
                {{- end }}
          - name: SPRING_DATA_MONGODB_DATABASE
            value: {{ .Values.mongodb.database | default .Values.appName }}
          - name: POSTMAN_RUNNER_URL
            value: http://{{ .Values.appName }}-postman-runtime:8080
          - name: TEST_CALLBACK_URL
            value: http://{{ .Values.appName }}:8080
          - name: KEYCLOAK_ENABLED
            value: "{{ .Values.keycloak.enabled }}"
          {{- if hasKey .Values.keycloak "privateUrl" }}
          - name: KEYCLOAK_URL
            value: "{{ .Values.keycloak.privateUrl }}"
          - name: KEYCLOAK_PUBLIC_URL
            value: https://{{ .Values.keycloak.url }}
          {{- else }}
          - name: KEYCLOAK_URL
            value: https://{{ .Values.keycloak.url }}
          {{- end }}
          {{- if and .Values.features.async.enabled }}
          - name: ASYNC_MINION_URL
            value: http://{{ .Values.appName }}-async-minion:8080
          {{- end }}
          - name: KAFKA_BOOTSTRAP_SERVER
            {{- if eq .Values.features.async.kafka.install true }}
            value: "{{ .Values.appName }}-kafka-kafka-bootstrap:9092"
            {{- else }}
            value: "{{ .Values.features.async.kafka.url }}"
            {{- end }}
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: KAFKA_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.truststoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: KAFKA_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.keystoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-keystore"
            {{- end }}
          {{- end }}
          {{- toYaml .Values.microcks.env | nindent 10 }}
        resources:
          {{- toYaml .Values.microcks.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 25
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 35
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: "/api/health"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        volumeMounts:
          - name: "{{ .Values.appName }}-config"
            mountPath: "/deployments/config"
          {{- if (.Values.microcks.grpcEnableTLS) }}
          - name: "{{ .Values.appName }}-grpc-certs"
            mountPath: "/deployments/config/grpc"
          {{- end }}
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: "{{ .Values.appName }}-kafka-truststore"
            mountPath: "/deployments/config/kafka/truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: "{{ .Values.appName }}-kafka-keystore"
            mountPath: "/deployments/config/kafka/keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.microcks.customSecretRef }}
          - name: "{{ .Values.microcks.customSecretRef.secret }}"
            mountPath: "/deployments/config/custom/secret"
          {{- end}}
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-config"
          configMap:
            name: "{{ .Values.appName }}-config"
        {{- if (.Values.microcks.grpcEnableTLS) }}
        - name: "{{ .Values.appName }}-grpc-certs"
          secret:
            secretName: "{{ .Values.microcks.grpcSecretRef | default (print .Values.appName "-microcks-grpc-secret") }}"
        {{- end }}
        {{- if eq .Values.features.async.kafka.install false }}
          {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
          {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
        - name: "{{ .Values.appName }}-kafka-truststore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.truststoreSecretRef.secret }}"
          {{- end }}
          {{- end }}
          {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
        - name: "{{ .Values.appName }}-kafka-keystore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.keystoreSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.microcks.customSecretRef }}
        - name: "{{ .Values.microcks.customSecretRef.secret }}"
          secret:
            secretName: "{{ .Values.microcks.customSecretRef.secret }}"
        {{- end }}
      {{- if .Values.commonAffinities }}
      affinity:
        {{- .Values.commonAffinities | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.commonTolerations }}
      tolerations:
        {{- .Values.commonTolerations | toYaml | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-postman-runtime"
  labels:
    app: "{{ .Values.appName }}"
    container: postman-runtime
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}

spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: "{{ .Values.appName }}-postman-runtime"
      container: postman-runtime
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: "{{ .Values.appName }}-postman-runtime"
        container: postman-runtime
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      containers:
      - name: postman-runtime
        image: {{ include "microcks.postman.image" . }}
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: info
        resources:
          {{- toYaml .Values.postman.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 4
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/health"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      {{- if .Values.commonAffinities }}
      affinity:
        {{- .Values.commonAffinities | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.commonTolerations }}
      tolerations:
        {{- .Values.commonTolerations | toYaml | nindent 8 }}
      {{- end }}
{{- if and .Values.mongodb.install }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-mongodb"
  labels:
    app: "{{ .Values.appName }}"
    container: mongodb
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}

  creationTimestamp:
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: mongodb
      container: mongodb
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: mongodb
        container: mongodb
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      {{- if not (.Capabilities.APIVersions.Has "route.openshift.io/v1/Route") }}
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      {{- end }}
      containers:
      - name: mongodb
        image: {{ include "microcks.mongodb.image" . }}
        args: ["--dbpath","/var/lib/mongodb/data"]
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 3
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - mongo 127.0.0.1:27017/$MONGO_INITDB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
              --eval="quit()"
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 27017
        env:
        - name: MONGODB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              key: adminUsername
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: adminPassword
              name: "{{ .Values.appName }}-mongodb-connection"
        - name: MONGO_INITDB_DATABASE
          value: "{{ .Values.appName }}"
        resources:
          {{- toYaml .Values.mongodb.resources | nindent 10 }}
        volumeMounts:
        - name: "{{ .Values.appName }}-mongodb-data"
          mountPath: "/var/lib/mongodb/data"
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities: {}
          privileged: false
      volumes:
      - name: "{{ .Values.appName }}-mongodb-data"
        {{- if .Values.mongodb.persistent }}
        persistentVolumeClaim:
          claimName: "{{ .Values.appName }}-mongodb"
        {{- else }}
        emptyDir:
          medium: ''
        {{- end }}
      - name: custom-init-scripts
        configMap:
          name: "{{ .Values.appName }}-mongodb-init"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      {{- if .Values.commonAffinities }}
      affinity:
        {{- .Values.commonAffinities | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.commonTolerations }}
      tolerations:
        {{- .Values.commonTolerations | toYaml | nindent 8 }}
      {{- end }}
{{- end }}
{{- if and .Values.keycloak.enabled .Values.keycloak.install }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-keycloak"
  labels:
    app: "{{ .Values.appName }}"
    container: keycloak
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: keycloak
      container: keycloak
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: keycloak
        container: keycloak
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      containers:
      - name: keycloak-server
        image: {{ include "microcks.keycloak.image" . }}
        resources:
          {{- toYaml .Values.keycloak.resources | nindent 10 }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: jolokia
          containerPort: 8778
          protocol: TCP
        args:
        - 'start'
        - '--features=token-exchange'
        - '--db=$(KC_DB)'
        - '--db-url-host=$(KC_DB_URL_HOST)'
        - '--db-username=$(KC_DB_USER)'
        - '--db-password=$(KC_DB_PASSWORD)'
        {{- if hasKey .Values.keycloak "privateUrl" }}
        - '--hostname=https://{{ .Values.keycloak.url }}'
        - '--hostname-backchannel-dynamic=true'
        {{- else }}
        - '--hostname={{ .Values.keycloak.url }}'
        {{- end }}
        - '--health-enabled=true'
        - '--import-realm'
        env:
        - name: INTERNAL_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KEYCLOAK_ADMIN
          valueFrom:
            secretKeyRef:
              {{- if hasKey .Values.keycloak "secretRef" }}
              key: {{ .Values.keycloak.secretRef.usernameKey | default "username" }}
              name: {{ .Values.keycloak.secretRef.secret | default (print .Values.appName "-keycloak-admin") }}
              {{- else }}
              key: username
              name: "{{ .Values.appName }}-keycloak-admin"
              {{- end }}
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if hasKey .Values.keycloak "secretRef" }}
              key: {{ .Values.keycloak.secretRef.passwordKey | default "password" }}
              name: {{ .Values.keycloak.secretRef.secret | default (print .Values.appName "-keycloak-admin") }}
              {{- else }}
              key: password
              name: "{{ .Values.appName }}-keycloak-admin"
              {{- end }}
        - name: OPERATING_MODE
          value: clustered
        - name: KC_DB
          value: postgres
        - name: KC_DB_USER
          valueFrom:
            secretKeyRef:
              {{- if hasKey .Values.keycloak "secretRef" }}
              key: {{ .Values.keycloak.secretRef.postgresUsernameKey | default "postgresUsername" }}
              name: {{ .Values.keycloak.secretRef.secret | default (print .Values.appName "-keycloak-admin") }}
              {{- else }}
              key: postgresUsername
              name: "{{ .Values.appName }}-keycloak-admin"
              {{- end }}
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              {{- if hasKey .Values.keycloak "secretRef" }}
              key: {{ .Values.keycloak.secretRef.postgresPasswordKey | default "postgresPassword" }}
              name: {{ .Values.keycloak.secretRef.secret | default (print .Values.appName "-keycloak-admin") }}
              {{- else }}
              key: postgresPassword
              name: "{{ .Values.appName }}-keycloak-admin"
              {{- end }}
        - name: KC_DB_URL_DATABASE
          value: root
        - name: KC_DB_URL_HOST
          value: "{{ .Values.appName }}-keycloak-postgresql"
        - name: KC_PROXY
          value: "edge"
        livenessProbe:
          httpGet:
            path: "/health/live"
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 2
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: "/health/ready"
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: {{ .Values.appName }}-keycloak-config
          mountPath: "/opt/keycloak/data/import"
        securityContext:
          privileged: false
      volumes:
      - name: "{{ .Values.appName }}-keycloak-config"
        configMap:
          name: "{{ .Values.appName }}-keycloak-config"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      {{- if .Values.commonAffinities }}
      affinity:
        {{- .Values.commonAffinities | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.commonTolerations }}
      tolerations:
        {{- .Values.commonTolerations | toYaml | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-keycloak-postgresql"
  labels:
    app: "{{ .Values.appName }}"
    container: keycloak-postgresql
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: keycloak-postgresql
      container: keycloak-postgresql
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: keycloak-postgresql
        container: keycloak-postgresql
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: keycloak-postgresql
        image: {{ include "microcks.keycloakPostgres.image" . }}
        args: ["-c", "max_connections=100", "-c", "shared_buffers=12MB"]
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql 127.0.0.1 -U ${POSTGRES_USER} -q -d ${POSTGRES_DB} -c 'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        resources:
          {{- toYaml .Values.keycloak.postgresResources | nindent 10 }}
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: postgresUsername
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresPassword
              name: "{{ .Values.appName }}-keycloak-admin"
        - name: POSTGRES_DB
          value: root
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
          - name: "{{ .Values.appName }}-keycloak-postgresql-data"
            mountPath: "/var/lib/postgresql/data"
            subPath: pgdata
      volumes:
      - name: "{{ .Values.appName }}-keycloak-postgresql-data"
        {{- if .Values.keycloak.persistent }}
        persistentVolumeClaim:
          claimName: "{{ .Values.appName }}-keycloak-postgresql"
        {{- else }}
        emptyDir:
          medium: ''
        {{- end }}
      {{- if .Values.commonAffinities }}
      affinity:
        {{- .Values.commonAffinities | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.commonTolerations }}
      tolerations:
        {{- .Values.commonTolerations | toYaml | nindent 8 }}
      {{- end }}
{{- end }}
{{- if and .Values.features.async.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.appName }}-async-minion"
  labels:
    app: "{{ .Values.appName }}"
    container: async-minion
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}

spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Values.appName }}"
      deploymentconfig: async-minion
      container: async-minion
      group: microcks
  template:
    metadata:
      labels:
        app: "{{ .Values.appName }}"
        deploymentconfig: async-minion
        container: async-minion
        group: microcks
        {{- include "microcks-common-labels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- include "microcks-common-annotations" . | nindent 8 }}
    spec:
      containers:
      - name: async-minion
        image: {{ include "microcks.async-minion.image" . }}
        imagePullPolicy: IfNotPresent
        env:
          - name: QUARKUS_PROFILE
            value: kube
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: KAFKA_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.truststoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: KAFKA_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: {{ .Values.features.async.kafka.authentication.keystoreSecretRef.passwordKey }}
                name: "{{ .Values.appName }}-kafka-keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sqs.region }}
            {{- if eq .Values.features.async.sqs.credentialsType "env-variable" }}
            {{- if .Values.features.async.sqs.credentialsSecretRef }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sqs.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sqs.credentialsSecretRef.accessKeyIdKey }}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sqs.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sqs.credentialsSecretRef.secretAccessKeyKey }}
              {{- if .Values.features.async.sqs.credentialsSecretRef.sessionTokenKey }}
          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sqs.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sqs.credentialsSecretRef.sessionTokenKey }}
              {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sns.region }}
            {{- if eq .Values.features.async.sns.credentialsType "env-variable" }}
            {{- if .Values.features.async.sns.credentialsSecretRef }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sns.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sns.credentialsSecretRef.accessKeyIdKey }}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sns.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sns.credentialsSecretRef.secretAccessKeyKey }}
              {{- if .Values.features.async.sns.credentialsSecretRef.sessionTokenKey }}
          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.features.async.sns.credentialsSecretRef.secret }}
                key: {{ .Values.features.async.sns.credentialsSecretRef.sessionTokenKey }}
              {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.env }}
          {{- toYaml .Values.features.async.env | nindent 10 }}
          {{- end }}
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: "/q/health/live"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/q/health/ready"
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 2
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
          - name: "{{ .Values.appName }}-async-minion-config"
            mountPath: "/deployments/config"
          {{- if eq .Values.features.async.kafka.install false }}
            {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
            {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
          - name: "{{ .Values.appName }}-kafka-truststore"
            mountPath: "/deployments/config/kafka/truststore"
            {{- end }}
            {{- end }}
            {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
          - name: "{{ .Values.appName }}-kafka-keystore"
            mountPath: "/deployments/config/kafka/keystore"
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.googlepubsub.project }}
            {{- if .Values.features.async.googlepubsub.serviceAccountSecretRef }}
          - name: "{{ .Values.appName }}-googlepubsub-sa"
            mountPath: "/deployments/config/googlepubsub/sa"
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sqs.region }}
            {{- if .Values.features.async.sqs.credentialsSecretRef }}
            {{- if eq .Values.features.async.sqs.credentialsType "profile" }}
          - name: "{{ .Values.appName }}-amazonsqs-creds"
            mountPath: "/deployments/config/amazon-sqs"
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.features.async.sns.region }}
            {{- if .Values.features.async.sns.credentialsSecretRef }}
            {{- if eq .Values.features.async.sns.credentialsType "profile" }}
          - name: "{{ .Values.appName }}-amazonsns-creds"
            mountPath: "/deployments/config/amazon-sns"
            {{- end }}
            {{- end }}
          {{- end }}
        terminationMessagePath: "/dev/termination-log"
      volumes:
        - name: "{{ .Values.appName }}-async-minion-config"
          configMap:
            name: "{{ .Values.appName }}-async-minion-config"
        {{- if eq .Values.features.async.kafka.install false }}
          {{- if not (eq .Values.features.async.kafka.authentication.type "none") }}
          {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
        - name: "{{ .Values.appName }}-kafka-truststore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.truststoreSecretRef.secret }}"
          {{- end }}
          {{- end }}
          {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
        - name: "{{ .Values.appName }}-kafka-keystore"
          secret:
            secretName: "{{ .Values.features.async.kafka.authentication.keystoreSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.features.async.googlepubsub.project }}
          {{- if .Values.features.async.googlepubsub.serviceAccountSecretRef }}
        - name: "{{ .Values.appName }}-googlepubsub-sa"
          secret:
            secretName: "{{ .Values.features.async.googlepubsub.serviceAccountSecretRef.secret }}"
          {{- end }}
        {{- end }}
        {{- if .Values.features.async.sqs.region }}
          {{- if .Values.features.async.sqs.credentialsSecretRef }}
          {{- if eq .Values.features.async.sqs.credentialsType "profile" }}
        - name: "{{ .Values.appName }}-amazonsqs-creds"
          secret:
            secretName: "{{ .Values.features.async.sqs.credentialsSecretRef.secret }}"
          {{- end }}
          {{- end }}
        {{- end }}
        {{- if .Values.features.async.sns.region }}
          {{- if .Values.features.async.sns.credentialsSecretRef }}
          {{- if eq .Values.features.async.sns.credentialsType "profile" }}
        - name: "{{ .Values.appName }}-amazonsns-creds"
          secret:
            secretName: "{{ .Values.features.async.sns.credentialsSecretRef.secret }}"
          {{- end }}
          {{- end }}
        {{- end }}
      {{- if .Values.commonAffinities }}
      affinity:
        {{- .Values.commonAffinities | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.commonTolerations }}
      tolerations:
        {{- .Values.commonTolerations | toYaml | nindent 8 }}
      {{- end }}
{{- end }}
