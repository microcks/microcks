kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-config"
  labels:
    app: "{{ .Values.appName }}"
    container: spring
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
data:
  features.properties: |-
    features.feature.microcks-hub.enabled={{ .Values.features.microcksHub.enabled }}
    features.feature.microcks-hub.endpoint=https://hub.microcks.io/api
    features.feature.microcks-hub.allowed-roles={{ .Values.features.microcksHub.allowedRoles }}

    features.feature.repository-filter.enabled={{ .Values.features.repositoryFilter.enabled }}
    features.feature.repository-filter.label-key={{ .Values.features.repositoryFilter.labelKey }}
    features.feature.repository-filter.label-label={{ .Values.features.repositoryFilter.labelLabel }}
    features.feature.repository-filter.label-list={{ .Values.features.repositoryFilter.labelList }}

    features.feature.repository-tenancy.enabled={{ .Values.features.repositoryTenancy.enabled }}
    features.feature.repository-tenancy.artifact-import-allowed-roles={{ .Values.features.repositoryTenancy.artifactImportAllowedRoles }}

    features.feature.async-api.enabled={{ .Values.features.async.enabled }}
    features.feature.async-api.default-binding={{ .Values.features.async.defaultBinding }}
    features.feature.async-api.endpoint-WS={{ ( include "microcks-ws.url" . ) }}
    {{- if eq .Values.features.async.kafka.install true }}
    features.feature.async-api.endpoint-KAFKA={{ .Values.appName }}-kafka.{{ .Values.features.async.kafka.url }}:443
    {{- else }}
    features.feature.async-api.endpoint-KAFKA={{ .Values.features.async.kafka.url }}
    {{- end }}
    {{- if .Values.features.async.mqtt.url }}
    features.feature.async-api.endpoint-MQTT={{ .Values.features.async.mqtt.url }}
    {{- end }}
    {{- if .Values.features.async.amqp.url }}
    features.feature.async-api.endpoint-AMQP={{ .Values.features.async.amqp.url }}
    {{- end }}
    {{- if .Values.features.async.nats.url }}
    features.feature.async-api.endpoint-NATS={{ .Values.features.async.nats.url }}
    {{- end }}
    {{- if .Values.features.async.googlepubsub.project }}
    features.feature.async-api.endpoint-GOOGLEPUBSUB={{ .Values.features.async.googlepubsub.project }}
    {{- end }}
    {{- if .Values.features.async.sqs.region }}
    features.feature.async-api.endpoint-SQS={{ .Values.features.async.sqs.region }}{{ if .Values.features.async.sqs.endpointOverride }} at {{ .Values.features.async.sqs.endpointOverride }}{{ end }}
    {{- end }}
    {{- if .Values.features.async.sns.region }}
    features.feature.async-api.endpoint-SNS={{ .Values.features.async.sns.region }}{{ if .Values.features.async.sns.endpointOverride }} at {{ .Values.features.async.sns.endpointOverride }}{{ end }}
    {{- end }}

    features.feature.ai-copilot.enabled={{ .Values.features.aiCopilot.enabled }}
  application.properties: |-
    # Application configuration properties
    tests-callback.url=${TEST_CALLBACK_URL}
    postman-runner.url=${POSTMAN_RUNNER_URL}
    async-minion.url=${ASYNC_MINION_URL|http://localhost:8081}

    network.username=
    network.password=

    validation.resourceUrl=https://{{ .Values.microcks.url }}/api/resources/
    services.update.interval=${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}
    mocks.rest.enable-cors-policy=${ENABLE_CORS_POLICY:true}
    {{- if eq .Values.microcks.mockInvocationStats false }}
    mocks.enable-invocation-stats=false
    {{- end }}

    # Logging configuration properties
    logging.config=/deployments/config/logback.xml

    # Spring Security adapter configuration properties
    spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
    spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
    spring.security.oauth2.client.registration.keycloak.scope=openid,profile
    spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}
    spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
    spring.security.oauth2.resourceserver.jwt.issuer-uri=${sso.public-url}/realms/${keycloak.realm}
    {{- if hasKey .Values.keycloak "privateUrl" }}
    spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_URL}/realms/${keycloak.realm}/protocol/openid-connect/certs
    {{- end }}

    # Keycloak configuration properties
    keycloak.auth-server-url=${KEYCLOAK_URL}
    keycloak.realm={{ .Values.keycloak.realm }}
    keycloak.resource=microcks-app
    keycloak.use-resource-role-mappings=true
    keycloak.bearer-only=true
    keycloak.ssl-required=external
    keycloak.disable-trust-manager=true

    # Keycloak access configuration properties
    sso.public-url=${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}

    # Async mocking support.
    async-api.enabled={{ .Values.features.async.enabled }}
    async-api.default-binding={{ .Values.features.async.defaultBinding }}
    async-api.default-frequency={{ .Values.features.async.defaultFrequency }}

    # Kafka configuration properties
    spring.kafka.producer.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER:localhost:9092}
    {{- if eq .Values.features.async.kafka.install false }}
      {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
    spring.kafka.producer.properties.security.protocol=SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    spring.kafka.producer.properties.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    spring.kafka.producer.properties.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    spring.kafka.producer.properties.ssl.keystore.location=/deployments/config/kafka/keystore/{{ .Values.features.async.kafka.authentication.keystoreSecretRef.storeKey }}
    spring.kafka.producer.properties.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
    spring.kafka.producer.properties.ssl.keystore.type={{ .Values.features.async.kafka.authentication.keystoreType }}
      {{- else if eq .Values.features.async.kafka.authentication.type "SASL_SSL" }}
    spring.kafka.producer.properties.security.protocol=SASL_SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    spring.kafka.producer.properties.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    spring.kafka.producer.properties.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    spring.kafka.producer.properties.sasl.mechanism={{ .Values.features.async.kafka.authentication.saslMechanism }}
    spring.kafka.producer.properties.sasl.jaas.config={{ .Values.features.async.kafka.authentication.saslJaasConfig }}
        {{- if .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
    spring.kafka.producer.properties.sasl.login.callback.handler.class={{ .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
        {{- end }}
      {{- end }}
    {{- end }}

    {{- if (.Values.microcks.grpcEnableTLS) }}
    
    # Grpc server properties
    grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
    grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key
    {{- end }}

    # AI Copilot configuration properties
    ai-copilot.enabled={{ .Values.features.aiCopilot.enabled }}
    ai-copilot.implementation={{ .Values.features.aiCopilot.implementation }}
    {{- if eq .Values.features.aiCopilot.implementation "openai" }}
    ai-copilot.openai.api-key={{ .Values.features.aiCopilot.openai.apiKey }}
      {{- if .Values.features.aiCopilot.openai.timeout }}
    ai-copilot.openai.timeout={{ .Values.features.aiCopilot.openai.timeout }}
      {{- end }}
      {{- if .Values.features.aiCopilot.openai.model }}
    ai-copilot.openai.model={{ .Values.features.aiCopilot.openai.model }}
      {{- end }}
      {{- if .Values.features.aiCopilot.openai.maxTokens }}
    ai-copilot.openai.maxTokens={{ .Values.features.aiCopilot.openai.maxTokens }}
      {{- end }}
      {{- if .Values.features.aiCopilot.openai.apiUrl }}
    ai-copilot.openai.api-url={{ .Values.features.aiCopilot.openai.apiUrl }}
      {{- end }}
    {{- end }}
  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration scan="true">
      <!-- Stop output INFO at start -->
      <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
    
      <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <charset>utf-8</charset>
          <Pattern>%d{HH:mm:ss.SSS} [%p] %c - %m%n</Pattern>
        </encoder>
      </appender>

      <logger name="io.github.microcks" level="{{ .Values.microcks.logLevel }}"/>
      <!-- Change com.mongodb to org.mongodb so that com.mongodb.FongoDBCollection is ignored, set to debug and tests do not fail... -->
      <logger name="org.mongodb" level="INFO"/>
      <logger name="org.springframework.data.mongodb" level="INFO"/>
      <logger name="org.reflections" level="WARN"/>
      <logger name="sun.net.www.protocol.http" level="INFO"/>

      <logger name="jdk.event.security" level="WARN"/>
      <logger name="javax.activation" level="WARN"/>
      <logger name="javax.mail" level="WARN"/>
      <logger name="javax.xml.bind" level="WARN"/>
      <logger name="ch.qos.logback" level="WARN"/>
      <logger name="com.sun.xml.internal.bind" level="WARN"/>
      <logger name="org.apache" level="WARN"/>
      <logger name="org.apache.catalina.startup.DigesterFactory" level="OFF"/>
      <logger name="org.bson" level="WARN"/>
      <logger name="org.springframework" level="WARN"/>
      <logger name="org.springframework.aop" level="WARN"/>
      <logger name="org.springframework.web" level="WARN"/>
      <logger name="org.springframework.security" level="WARN"/>
      <logger name="org.springframework.cache" level="WARN"/>
      <logger name="org.springframework.scheduling" level="WARN"/>
      <logger name="org.thymeleaf" level="WARN"/>
      <logger name="org.xnio" level="WARN"/>
      <logger name="com.mangofactory.swagger" level="WARN"/>
      <logger name="sun.rmi.transport" level="WARN"/>

      <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
      </contextListener>

      <root level="INFO">
        <appender-ref ref="CONSOLE"/>
      </root>
    </configuration>
{{- if .Values.microcks.extraProperties }}
  application-extra.yaml: |-
  {{- with .Values.microcks.extraProperties }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- if (.Values.mongodb.install) }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-mongodb-init"
  labels:
    app: "{{ .Values.appName }}"
    container: mongodb
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
data:
  create-user.sh: |-
    #!/bin/bash
    echo "Started Adding the Users..."
    mongo admin --eval "db.getSiblingDB('${MONGO_INITDB_DATABASE}').createUser({user: '${MONGODB_USER}', pwd: '${MONGODB_PASSWORD}', roles: [{role: 'readWrite', db: '${MONGO_INITDB_DATABASE}'}]})"
    echo "End Adding the User Roles."
{{- end -}}
{{- if and .Values.keycloak.enabled .Values.keycloak.install }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-keycloak-config"
  labels:
    app: "{{ .Values.appName }}"
    container: keycloak
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
data:
  microcks-realm.json: |-
    {
      "id": "microcks",
      "realm": "microcks",
      "displayName": "Microcks",
      "notBefore": 0,
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "offlineSessionIdleTimeout": 2592000,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "users" : [
        {
          "username" : "user",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user" ]
          }
        },
        {
          "username" : "manager",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "microcks-app": [ "user", "manager" ]
          }
        },
        {
          "username" : "admin",
          "enabled": true,
          "credentials" : [
            { "type" : "password",
              "value" : "microcks123" }
          ],
          "realmRoles": [],
          "applicationRoles": {
            "realm-management": [ "manage-users", "manage-clients" ],
            "account": [ "manage-account" ],
            "microcks-app": [ "user", "manager", "admin" ]
          }
        }
      ],
      "roles": {
        "realm": [],
        "client": {
          "microcks-app": [
            {
              "name": "user",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "admin",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            },
            {
              "name": "manager",
              "composite": false,
              "clientRole": true,
              "containerId": "microcks"
            }
          ]
        }
      },
      "groups": [
        {
          "name": "microcks",
          "path": "/microcks",
          "attributes": {},
          "realmRoles": [],
          "clientRoles": {},
          "subGroups": [
            {
              "name": "manager",
              "path": "/microcks/manager",
              "attributes": {},
              "realmRoles": [],
              "clientRoles": {},
              "subGroups": []
            }
          ]
        }
      ],
      "defaultRoles": [ ],
      "requiredCredentials": [ "password" ],
      "scopeMappings": [],
      "clientScopeMappings": {
        "microcks-app": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manager",
              "admin",
              "user"
            ]
          }
        ],
        "realm-management": [
          {
            "client": "microcks-app-js",
            "roles": [
              "manage-users",
              "manage-clients"
            ]
          }
        ]
      },
      "clients": [
        {
          "clientId": "microcks-app-js",
          "enabled": true,
          "publicClient": true,
          "redirectUris": [
            "https://{{ .Values.microcks.url }}/*"
          ],
          "webOrigins": [
            "+"
          ],
          "fullScopeAllowed": false,
          "protocolMappers": [
            {
              "name": "microcks-group-mapper",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "microcks-groups",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "applications": [
        {
          "name": "microcks-app",
          "enabled": true,
          "bearerOnly": true,
          "defaultRoles": [
            "user"
          ]
        },
        {
          "name": "{{ .Values.keycloak.serviceAccount }}",
          "secret": "{{ .Values.keycloak.serviceAccountCredentials }}",
          "enabled": true,
          "bearerOnly": false,
          "publicClient": false,
          "standardFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "clientAuthenticatorType": "client-secret"
        }
      ],
      "identityProviders": [
      ],
      "requiredActions": [
        {
          "alias": "VERIFY_PROFILE",
          "name": "Verify Profile",
          "providerId": "VERIFY_PROFILE",
          "enabled": false,
          "defaultAction": false,
          "priority": 90,
          "config": {}
        }
      ],
      "keycloakVersion": "10.0.1"
    }
{{- end }}
{{- if .Values.features.async.enabled }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Values.appName }}-async-minion-config"
  labels:
    app: "{{ .Values.appName }}"
    container: async-minion
    group: microcks
    {{- include "microcks-common-labels" . | nindent 4 }}
  annotations:
    {{- include "microcks-common-annotations" . | nindent 4 }}
data:
  application.properties: |-
    # Configuration file.
    %kube.quarkus.http.port=8080

    # Configure the log level.
    %kube.quarkus.log.level={{ .Values.microcks.logLevel }}
    %kube.quarkus.log.console.level={{ .Values.microcks.logLevel }}

    # Access to Microcks API server.
    %kube.io.github.microcks.minion.async.client.MicrocksAPIConnector/mp-rest/url=http://{{ .Values.appName }}:8080
    %kube.microcks.serviceaccount={{ .Values.keycloak.serviceAccount }}
    %kube.microcks.serviceaccount.credentials={{ .Values.keycloak.serviceAccountCredentials }}

    {{ if hasKey .Values.keycloak "privateUrl" -}}
    # Access to Keycloak URL if you override the one coming from Microcks config
    keycloak.auth.url={{ .Values.keycloak.privateUrl }}
    {{- end }}

    # Access to Kafka broker.
    {{- if .Values.features.async.kafka.install }}
    %kube.kafka.bootstrap.servers={{ .Values.appName }}-kafka-kafka-bootstrap:9092
    %kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={{ .Values.appName }}-kafka-kafka-bootstrap:9092
    {{ else }}
    %kube.kafka.bootstrap.servers={{ .Values.features.async.kafka.url }}
    %kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={{ .Values.features.async.kafka.url }}

      {{- if eq .Values.features.async.kafka.authentication.type "SSL" }}
    %kube.kafka.security.protocol=SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.kafka.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.kafka.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.kafka.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.kafka.ssl.keystore.location=/deployments/config/kafka/keystore/{{ .Values.features.async.kafka.authentication.keystoreSecretRef.storeKey }}
    %kube.kafka.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
    %kube.kafka.ssl.keystore.type={{ .Values.features.async.kafka.authentication.keystoreType }}

    %kube.mp.messaging.incoming.microcks-services-updates.security.protocol=SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.location=/deployments/config/kafka/keystore/{{ .Values.features.async.kafka.authentication.keystoreSecretRef.storeKey }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.password=${KAFKA_KEYSTORE_PASSWORD}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.type={{ .Values.features.async.kafka.authentication.keystoreType }}
      {{- else if eq .Values.features.async.kafka.authentication.type "SASL_SSL" }}
    %kube.kafka.security.protocol=SASL_SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.kafka.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.kafka.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.kafka.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.kafka.sasl.mechanism={{ .Values.features.async.kafka.authentication.saslMechanism }}
    %kube.kafka.sasl.jaas.config={{ .Values.features.async.kafka.authentication.saslJaasConfig }}
        {{- if .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
    %kube.kafka.sasl.login.callback.handler.class={{ .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
        {{- end }}
    
    %kube.mp.messaging.incoming.microcks-services-updates.security.protocol=SASL_SSL
      {{- if .Values.features.async.kafka.authentication.truststoreSecretRef }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.location=/deployments/config/kafka/truststore/{{ .Values.features.async.kafka.authentication.truststoreSecretRef.storeKey }}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.password=${KAFKA_TRUSTSTORE_PASSWORD}
    %kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.type={{ .Values.features.async.kafka.authentication.truststoreType }}
      {{- end }}
    %kube.mp.messaging.incoming.microcks-services-updates.sasl.mechanism={{ .Values.features.async.kafka.authentication.saslMechanism }}
    %kube.mp.messaging.incoming.microcks-services-updates.sasl.jaas.config={{ .Values.features.async.kafka.authentication.saslJaasConfig }}
        {{- if .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
    %kube.mp.messaging.incoming.microcks-services-updates.sasl.login.callback.handler.class={{ .Values.features.async.kafka.authentication.saslLoginCallbackHandlerClass }}
        {{- end }}
      {{- end }}
    {{ end }}

    {{- if .Values.features.async.kafka.schemaRegistry.url }}
    # Access to Kafka schema registry.
    %kube.kafka.schema.registry.url={{ .Values.features.async.kafka.schemaRegistry.url }}
    %kube.kafka.schema.registry.confluent={{ .Values.features.async.kafka.schemaRegistry.confluent }}
    %kube.kafka.schema.registry.username={{ .Values.features.async.kafka.schemaRegistry.username | default "" }}
    %kube.kafka.schema.registry.credentials.source={{ .Values.features.async.kafka.schemaRegistry.credentialsSource | default "USER_INFO" }}
    {{ end }}

    {{- if .Values.features.async.mqtt.url }}
    # Access to MQTT broker.
    %kube.mqtt.server={{ .Values.features.async.mqtt.url }}
    %kube.mqtt.username={{ .Values.features.async.mqtt.username }}
    %kube.mqtt.password={{ .Values.features.async.mqtt.password }}
    {{- end }}

    {{- if .Values.features.async.amqp.url }}
    # Access to AMQP broker.
    %kube.amqp.server={{ .Values.features.async.amqp.url }}
    %kube.amqp.username={{ .Values.features.async.amqp.username }}
    %kube.amqp.password={{ .Values.features.async.amqp.password }}
    {{- end }}

    {{- if .Values.features.async.nats.url }}
    # Access to NATS broker.
    %kube.nats.server={{ .Values.features.async.nats.url }}
    %kube.nats.username={{ .Values.features.async.nats.username }}
    %kube.nats.password={{ .Values.features.async.nats.password }}
    {{- end }}

    {{- if .Values.features.async.googlepubsub.project }}
    # Access to Google PubSub.
    %kube.googlepubsub.project={{ .Values.features.async.googlepubsub.project }}
      {{- if .Values.features.async.googlepubsub.serviceAccountSecretRef.fileKey }}
    %kube.googlepubsub.service-account-location=/deployments/config/googlepubsub/sa/{{ .Values.features.async.googlepubsub.serviceAccountSecretRef.fileKey }}
      {{- end }}
    {{- end }}

    {{- if .Values.features.async.sqs.region }}
    # Access to Amazon SQS.
    %kube.amazonsqs.region={{ .Values.features.async.sqs.region }}
    %kube.amazonsqs.credentials-type={{ .Values.features.async.sqs.credentialsType }}
      {{- if eq .Values.features.async.sqs.credentialsType "profile" }}
    %kube.amazonsqs.credentials-profile-name={{ .Values.features.async.sqs.credentialsProfile }}
        {{- if .Values.features.async.sqs.credentialsSecretRef.fileKey }}
    %kube.amazonsqs.credentials-profile-location=/deployments/config/amazon-sqs/{{ .Values.features.async.sqs.credentialsSecretRef.fileKey }}
        {{- end }}
      {{- end }}
    {{- if .Values.features.async.sqs.endpointOverride }}
    %kube.amazonsqs.endpoint-override={{ .Values.features.async.sqs.endpointOverride }}
    {{- end }}
    {{- end }}

    {{- if .Values.features.async.sns.region }}
    # Access to Amazon SNS.
    %kube.amazonsns.region={{ .Values.features.async.sns.region }}
    %kube.amazonsns.credentials-type={{ .Values.features.async.sns.credentialsType }}
      {{- if eq .Values.features.async.sns.credentialsType "profile" }}
    %kube.amazonsns.credentials-profile-name={{ .Values.features.async.sns.credentialsProfile }}
        {{- if .Values.features.async.sns.credentialsSecretRef.fileKey }}
    %kube.amazonsns.credentials-profile-location=/deployments/config/amazon-sns/{{ .Values.features.async.sns.credentialsSecretRef.fileKey }}
        {{- end }}
      {{- end }}
    {{- if .Values.features.async.sns.endpointOverride }}
    %kube.amazonsns.endpoint-override={{ .Values.features.async.sns.endpointOverride }}
    {{- end }}
    {{- end }}

    # Configure the minion own behavioral properties.
    %kube.minion.supported-bindings=KAFKA,WS{{ if .Values.features.async.mqtt.url }},MQTT{{ end }}{{ if .Values.features.async.amqp.url }},AMQP{{ end }}{{ if .Values.features.async.nats.url }},NATS{{ end }}{{ if .Values.features.async.googlepubsub.project }},GOOGLEPUBSUB{{ end }}{{ if .Values.features.async.sqs.region }},SQS{{ end }}{{ if .Values.features.async.sns.region }},SNS{{ end }}
    %kube.minion.restricted-frequencies=3,10,30
    %kube.minion.default-avro-encoding={{ .Values.features.async.defaultAvroEncoding }}
{{- end -}}
