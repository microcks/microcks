appName: microcks
ingresses: true

microcks:
  url: microcks-microcks.192.168.99.100.nip.io
  #url: microcks-microcks.192.168.64.6.nip.io
  #ingressSecretRef: my-secret-for-microcks-ingress
  #ingressAnnotations:
    #cert-manager.io/issuer: my-cert-issuer
    #kubernetes.io/tls-acme: "true"
  #ingressClassName: nginx

  grpcEnableTLS: true
  #grpcSecretRef: my-secret-for-microcks-grpc
  #grpcIngressClassName: nginx
    #grpcIngressAnnotations:
  #myclass.ingress.kubernetes.io/backend-protocol: "GRPC"
  #myclass.ingress.kubernetes.io/ssl-passthrough: "true"

  generateCert: true
  image:
    registry: quay.io
    repository: microcks/microcks
    tag: 1.11.0
    digest:
  replicas: 1

  # Uncomment to change Microcks Service to a NodePort
  #serviceType: NodePort

  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      #cpu: 500m
      memory: 512Mi

  # Enabling by adding yaml extra application configurations
  extraProperties:
    #server:
      #tomcat:
        #remoteip:
          #internal-proxies: 172.16.0.0/12

  env:
    - name: SERVICES_UPDATE_INTERVAL
      value: 0 0 0/2 * * *
    #- name: MAX_UPLOAD_FILE_SIZE
    #  value: 5MB
    #- name: CORS_REST_ALLOWED_ORIGINS
    #  value: my-site.acme.com
    #- name: CORS_REST_ALLOW_CREDENTIALS
    #  value: 'true'

  #logLevel: TRACE | DEBUG | INFO | WARN
  logLevel: INFO

  # Enabling/disabling mock invocation stats.
  mockInvocationStats: true

  # Custom secret for Microcks
  # It can be usec to deploy a keystore to add certificats to trust sso connection with keycloak.
  # In this case: Use an existing secret with the provided keystore.
  # Don't forget to add java options like that if your secret is a keystore:
  # JAVA_OPTIONS: "-Djavax.net.ssl.trustStore=/deployments/config/custom/secret/KEYSTORE -Djavax.net.ssl.trustStorePassword=XXXXX"
  #customSecretRef:
  #  secret: microcks-keystore
  #  key: cacerts

postman:
  image:
    registry: quay.io
    repository: microcks/microcks-postman-runtime
    tag: 0.6.0
    digest:
  replicas: 1
  resources:
    requests:
      memory: 256Mi
    limits:
      memory: 256Mi

keycloak:
  # Use keycloack in this release
  enabled: true
  # Install keycloack in this release
  install: true
  realm: microcks
  # Now that we switched to newer version of Keycloak-X, default url does not contain '/auth' path
  # If you use an older external Keycloak instance, url must include the '/auth' path
  url: keycloak-microcks.192.168.99.100.nip.io
  #privateUrl: http://microcks-keycloak.microcks.svc.cluster.local:8080
  #ingressSecretRef: my-secret-for-keycloak-ingress
  #ingressAnnotations:
    #cert-manager.io/issuer: my-cert-issuer
    #kubernetes.io/tls-acme: "true"
  #ingressClassName: nginx
  #pvcAnnotations:
    #helm.sh/resource-policy: keep
  generateCert: true
  image:
    registry: quay.io
    repository: keycloak/keycloak
    tag: 26.0.0
    digest:
  adminUsername: admin
  # Unless you uncomment following line, admin password will be randomly generated.
  # Beware that in case of update, new value will be generated and
  #adminPassword: 123

  # Or you can uncomment secretRef block if credentials are provided through a Secret.
  #secretRef:
    #secret: keycloak
    #usernameKey: username
    #passwordKey: password
    #postgresUsernameKey: postgresUsername
    #postgresPasswordKey: postgresPassword

  # Uncomment to change Keycloak Service to a NodePort
  #serviceType: NodePort

  resources:
    requests:
      cpu: 400m
      memory: 512Mi
    limits:
      #cpu: 500m
      memory: 512Mi

  persistent: true
  volumeSize: 1Gi
  # Unless you uncomment following line and set class, persistent volume claim is created
  # with no storage class and relies on cluster default one.
  #storageClassName: my-awesome-class

  postgresImage:
    registry:
    repository: library/postgres
    tag: 16.3-alpine

  postgresResources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 150m
      memory: 192Mi

  username: userP
  # Unless you uncomment following line, admin password will be randomly generated.
  # Beware that in case of update, new value will be generated and overwrite existing one.
  #password: 123

  serviceAccount: microcks-serviceaccount
  serviceAccountCredentials: ab54d329-e435-41ae-a900-ec6b3fe15c54

mongodb:
  install: true
  #uri: mongodb:27017
  #uriParameters: "?ssl=true"
  #database: sampledb
  image:
    registry:
    repository: library/mongo
    tag: 4.4.29
    digest:
  persistent: true
  volumeSize: 2Gi
  # Unless you uncomment following line and set class, persistent volume claim is created
  # with no storage class and relies on cluster default one.
  #storageClassName: my-awesome-class

  username: userM
  # Unless you uncomment following line, admin password will be randomly generated.
  # Beware that in case of update, new value will be generated and overwrite existing one.
  #password: 123

  # Or you can uncomment secretRef block if username and password are provided through a Secret.
  #secretRef:
    #secret: mongodb
    #usernameKey: database-user
    #passwordKey: database-password

  #pvcAnnotations:
    #helm.sh/resource-policy: keep

  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      #cpu: 500m
      memory: 512Mi

features:
  async:
    enabled: false
    defaultBinding: KAFKA
    defaultFrequency: 10
    defaultAvroEncoding: RAW

    image:
      registry: quay.io
      repository: microcks/microcks-async-minion
      tag: 1.11.0
      digest:

    env:
      #- name: OAUTH_CLIENT_ID
      #  value: <kafka-oauth-client-id>
      #- name: OAUTH_CLIENT_SECRET
      #  value: <kafka-oauth-client-secret>
      #- name: OAUTH_TOKEN_ENDPOINT_URI
      #  value: <kafka-oauth-endpoint-uri>

    kafka:
      install: true
      url: 192.168.99.100.nip.io
      #url: kafka-bootstrap:9092
      # Set this to your own class name if not using bare nginx
      ingressClassName: nginx
      persistent: false
      volumeSize: 2Gi
      resources:
        #requests:
          #cpu: 100m
          #memory: 256Mi
        limits:
          #cpu: 500m
          memory: 800Mi
      zkResources:
        #requests:
          #cpu: 100m
          #memory: 256Mi
        limits:
          #cpu: 500m
          memory: 800Mi
      schemaRegistry:
        #url: http://schema-registry.192.168.99.100.nip.io
        confluent: true
        username: microcks
        credentialsSource: USER_INFO

      # If you choose not to install a Kafka broker and reuse on pre-existing,
      # you may need to set some authentication parameters.
      authentication:
        # If not 'none', we support 'SSL' for mutual TLS and 'SASL_SSL' for SASL over TLS.
        type: none #SSL #SASL_SSL
        # For TLS transport, you'll always need a truststore to hold your cluster certificate.
        # You have to setup a truststore type and a secret reference for retrieving content and password.
        #truststoreType: PKCS12
        #truststoreSecretRef:
          #secret: kafka-cluster-ca-cert
          #storeKey: ca.p12
          #passwordKey: ca.password
        # For mutual TLS authentication, you'll also need a keystore to hold your user private key.
        # You have to setup a keystore type and a secret reference for retrieving content and password.
        keystoreType: PKCS12
        keystoreSecretRef:
          secret: mtls-user
          storeKey: user.p12
          passwordKey: user.password
        # For SASL authentication, you'll have to specify an additional authentication mechanism
        # as well as a JAAS configuration line with login module, username and password.
        #saslMechanism: SCRAM-SHA-512
        #saslJaasConfig: org.apache.kafka.common.security.scram.ScramLoginModule required username="scram-user" password="tDtDCT3pYKE5";
        # or an OAuth configuration (you'll need here to extend the async-minion image with your handler class implementation)
        #saslMechanism: OAUTHBEARER
        #saslJaasConfig: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;
        #saslLoginCallbackHandlerClass: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

    # Uncomment the mqtt.url and put a valid endpoint address below to enable MQTT support.
    mqtt:
      #url: artemis:1883
      username: microcks
      password: microcks

    # Uncomment the amqp.url and put a valid endpoint address below to enable AMQP support.
    amqp:
      #url: rabbitmq:5672
      username: microcks
      password: microcks

    # Uncomment the nats.url and put a valid endpoint address below to enable NATS support.
    nats:
      #url: nats:4222
      username: microcks
      password: microcks

    # Uncomment the googlepubsub.project and put a valid project id below to enable PubSub support.
    googlepubsub:
      #project: my-project
      # For authentication, we rely on a Google Service Account JSON file.
      # You have to setup a secret reference for retrieving this file from secret.
      serviceAccountSecretRef:
        secret: googlecloud-service-account
        fileKey: googlecloud-service-account.json

    # Uncomment the sqs.region and put a valid region below to enable Amazon SQS support.
    sqs:
      #region: eu-west-3
      # For authentication, we rely on either Environment Variables or an AWS Profile of type credentials (see https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials_profiles.html).
      # You can choose between 'env-variable' and 'profile'
      credentialsType: env-variable
      #credentialsType: profile
      # For 'env-variable', you may want to specify a Secret to get environment variables from.
      #credentialsSecretRef:
        #secret: aws-credentials
        #accessKeyIdKey: access_key_id
        #secretAccessKeyKey: secret_access_key
        #sessionTokenKey: session_token
      # For 'profile', you have to provide the profile name and setup a secret reference for retrieving this file from secret.
      credentialsProfile: microcks-sqs-admin
      #credentialsSecretRef:
        #secret: aws-credentials
        #fileKey: aws.profile

    # Uncomment the sns.region and put a valid region below to enable Amazon SNS support.
    sns:
      #region: eu-west-3
      # For authentication, we rely on either Environment Variables or an AWS Profile of type credentials (see https://docs.aws.amazon.com/sdk-for-php/v3/developer-guide/guide_credentials_profiles.html).
      # You can choose between 'env-variable' and 'profile'
      credentialsType: env-variable
      #credentialsType: profile
      # For 'env-variable', you may want to specify a Secret to get environment variables from.
      #credentialsSecretRef:
        #secret: aws-credentials
        #accessKeyIdKey: access_key_id
        #secretAccessKeyKey: secret_access_key
        #sessionTokenKey: session_token
      # For 'profile', you have to provide the profile name and setup a secret reference for retrieving this file from secret.
      credentialsProfile: microcks-sns-admin
      #credentialsSecretRef:
        #secret: aws-credentials
        #fileKey: aws.profile

    ws:
      #ingressSecretRef: my-secret-for-microcks-ws-ingress
      #ingressAnnotations:
        #cert-manager.io/issuer: my-ws-cert-issuer
        #kubernetes.io/tls-acme: "true"
      #ingressClassName: nginx
      generateCert: true

  repositoryFilter:
    enabled: false
    labelKey: app
    labelLabel: Application
    labelList: app,status

  repositoryTenancy:
    enabled: false
    artifactImportAllowedRoles: admin,manager,manager-any

  microcksHub:
    enabled: true
    allowedRoles: admin,manager,manager-any

  aiCopilot:
    enabled: false
    implementation: openai
    openai:
      apiKey: sk-my-openai-api-token
      timeout: 20
      #model: gpt-3.5-turbo
      #maxTokens: 2000

# common labels associated with all resources helm chart
commonLabels: {}

# common annotations associated with all resource of this helm chart
commonAnnotations: {}

# common affinities associated with all resource of this helm chart
commonAffinities: {}

## Node tolerations for server scheduling to nodes with taints
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##
commonTolerations: []
